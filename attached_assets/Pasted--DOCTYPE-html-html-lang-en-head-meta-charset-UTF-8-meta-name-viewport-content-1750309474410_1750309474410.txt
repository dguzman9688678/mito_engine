<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AJAX & JavaScript Dynamic Content Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .concept-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .concept-card {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .concept-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

        .concept-card:hover {
            transform: translateY(-10px);
        }

        .concept-title {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .concept-description {
            color: #666;
            line-height: 1.6;
            margin-bottom: 20px;
        }

        .demo-button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .demo-button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* CENTERED DISPLAY MODAL */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            transform: scale(0.7);
            transition: transform 0.3s ease;
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
        }

        .modal-overlay.active .modal {
            transform: scale(1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 2rem;
            cursor: pointer;
            color: #999;
            transition: color 0.3s ease;
        }

        .close-btn:hover {
            color: #667eea;
        }

        .data-container {
            margin-top: 20px;
        }

        .data-item {
            background: #f8f9fa;
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            border-left: 4px solid #667eea;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .ajax-demo {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .api-response {
            background: #1a1a1a;
            color: #00ff00;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            margin: 15px 0;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-success { background: #28a745; }
        .status-loading { background: #ffc107; animation: pulse 1s infinite; }
        .status-error { background: #dc3545; }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .feature-showcase {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .feature-item {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            transition: transform 0.3s ease;
        }

        .feature-item:hover {
            transform: translateY(-5px);
        }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Dynamic Web Technologies</h1>
            <p>Interactive demonstration of AJAX, JavaScript, and dynamic content</p>
        </div>

        <div class="concept-grid">
            <!-- Centered Display Demo -->
            <div class="concept-card">
                <div class="concept-title">
                    🎯 Centered Display
                </div>
                <div class="concept-description">
                    Perfect centering using CSS Flexbox. Modal appears exactly in the center of the viewport regardless of screen size.
                </div>
                <button class="demo-button" onclick="showCenteredModal()">
                    <span>Open Centered Modal</span>
                </button>
            </div>

            <!-- AJAX Demo -->
            <div class="concept-card">
                <div class="concept-title">
                    📡 AJAX Requests
                </div>
                <div class="concept-description">
                    Asynchronous data fetching without page reload. Watch real-time API calls and responses.
                </div>
                <button class="demo-button" onclick="demonstrateAJAX()" id="ajaxBtn">
                    <span>Fetch Data via AJAX</span>
                </button>
            </div>

            <!-- JavaScript Dynamic Content -->
            <div class="concept-card">
                <div class="concept-title">
                    ⚡ Dynamic Content
                </div>
                <div class="concept-description">
                    Content that updates in real-time based on user interactions and data changes.
                </div>
                <button class="demo-button" onclick="showDynamicContent()">
                    <span>Generate Dynamic Content</span>
                </button>
            </div>

            <!-- Data Fetching -->
            <div class="concept-card">
                <div class="concept-title">
                    🔄 Data Fetching
                </div>
                <div class="concept-description">
                    Modern fetch API with error handling, loading states, and progressive data loading.
                </div>
                <button class="demo-button" onclick="demonstrateDataFetching()">
                    <span>Advanced Data Fetching</span>
                </button>
            </div>
        </div>

        <!-- AJAX Demonstration Area -->
        <div class="ajax-demo">
            <h2>🔬 Live AJAX & Data Fetching Demo</h2>
            <div id="ajaxStatus">Ready to fetch data...</div>
            <div id="ajaxResponse"></div>
        </div>

        <!-- Feature Showcase -->
        <div class="feature-showcase">
            <div class="feature-item">
                <div class="feature-icon">⚡</div>
                <h3>No Page Reload</h3>
                <p>Content updates instantly without refreshing the entire page</p>
            </div>
            <div class="feature-item">
                <div class="feature-icon">🎯</div>
                <h3>Perfect Centering</h3>
                <p>Modals and overlays positioned exactly in the center</p>
            </div>
            <div class="feature-item">
                <div class="feature-icon">🔄</div>
                <h3>Real-time Updates</h3>
                <p>Content changes dynamically based on user interactions</p>
            </div>
            <div class="feature-item">
                <div class="feature-icon">📊</div>
                <h3>Live Data</h3>
                <p>Fetch and display data from APIs in real-time</p>
            </div>
        </div>
    </div>

    <!-- Centered Modal -->
    <div class="modal-overlay" id="modalOverlay">
        <div class="modal">
            <div class="modal-header">
                <h2 id="modalTitle">🎯 Perfectly Centered Modal</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalContent">
                <p><strong>This modal demonstrates perfect centering:</strong></p>
                <ul style="margin: 15px 0; padding-left: 20px;">
                    <li><code>position: fixed</code> - Covers entire viewport</li>
                    <li><code>display: flex</code> - Enables flexbox layout</li>
                    <li><code>align-items: center</code> - Centers vertically</li>
                    <li><code>justify-content: center</code> - Centers horizontally</li>
                </ul>
                <p>The modal stays centered regardless of screen size or content length!</p>
                <div id="dynamicModalContent"></div>
            </div>
        </div>
    </div>

    <script>
        // CENTERED DISPLAY FUNCTIONS
        function showCenteredModal() {
            document.getElementById('modalOverlay').classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        }

        function closeModal() {
            document.getElementById('modalOverlay').classList.remove('active');
            document.body.style.overflow = 'auto'; // Restore scrolling
            document.getElementById('dynamicModalContent').innerHTML = '';
        }

        // Close modal when clicking backdrop
        document.getElementById('modalOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // AJAX DEMONSTRATION
        async function demonstrateAJAX() {
            const btn = document.getElementById('ajaxBtn');
            const status = document.getElementById('ajaxStatus');
            const response = document.getElementById('ajaxResponse');

            // Update button to loading state
            btn.innerHTML = '<div class="loading"></div><span>Fetching...</span>';
            btn.disabled = true;

            // Update status
            status.innerHTML = '<span class="status-indicator status-loading"></span>Making AJAX request...';

            try {
                // Simulate AJAX call to a public API
                const apiResponse = await fetch('https://jsonplaceholder.typicode.com/posts/1');
                const data = await apiResponse.json();

                // Simulate processing time
                await new Promise(resolve => setTimeout(resolve, 1000));

                // Success response
                status.innerHTML = '<span class="status-indicator status-success"></span>AJAX request successful!';
                
                response.innerHTML = `
                    <div class="api-response">
{
  "status": "200 OK",
  "method": "GET",
  "url": "https://jsonplaceholder.typicode.com/posts/1",
  "response": {
    "id": ${data.id},
    "title": "${data.title}",
    "body": "${data.body}",
    "userId": ${data.userId}
  }
}
                    </div>
                    <div class="data-item">
                        <strong>Key Benefits of AJAX:</strong>
                        <ul style="margin-top: 10px; padding-left: 20px;">
                            <li>No page reload required</li>
                            <li>Faster user experience</li>
                            <li>Reduced server load</li>
                            <li>Real-time data updates</li>
                        </ul>
                    </div>
                `;

            } catch (error) {
                status.innerHTML = '<span class="status-indicator status-error"></span>AJAX request failed!';
                response.innerHTML = `
                    <div class="api-response">
ERROR: ${error.message}
                    </div>
                `;
            }

            // Reset button
            btn.innerHTML = '<span>Fetch Data via AJAX</span>';
            btn.disabled = false;
        }

        // DYNAMIC CONTENT DEMONSTRATION
        function showDynamicContent() {
            const modalContent = document.getElementById('dynamicModalContent');
            
            showCenteredModal();
            document.getElementById('modalTitle').textContent = '⚡ Dynamic Content Generation';

            // Clear existing content
            modalContent.innerHTML = '<div class="loading" style="margin: 20px auto;"></div>';

            // Simulate dynamic content generation
            setTimeout(() => {
                const currentTime = new Date().toLocaleString();
                const randomData = {
                    timestamp: currentTime,
                    randomNumber: Math.floor(Math.random() * 1000),
                    userAgent: navigator.userAgent.split(' ')[0],
                    viewportWidth: window.innerWidth,
                    viewportHeight: window.innerHeight
                };

                modalContent.innerHTML = `
                    <div style="margin-top: 20px;">
                        <h3>🔄 Content Generated Dynamically</h3>
                        <div class="data-item">
                            <strong>Generated at:</strong> ${randomData.timestamp}
                        </div>
                        <div class="data-item">
                            <strong>Random ID:</strong> #${randomData.randomNumber}
                        </div>
                        <div class="data-item">
                            <strong>Browser:</strong> ${randomData.userAgent}
                        </div>
                        <div class="data-item">
                            <strong>Viewport:</strong> ${randomData.viewportWidth} × ${randomData.viewportHeight}
                        </div>
                        <p style="margin-top: 15px; color: #666;">
                            This content was generated using JavaScript without any page reload!
                        </p>
                    </div>
                `;
            }, 1500);
        }

        // ADVANCED DATA FETCHING
        async function demonstrateDataFetching() {
            const status = document.getElementById('ajaxStatus');
            const response = document.getElementById('ajaxResponse');

            status.innerHTML = '<span class="status-indicator status-loading"></span>Demonstrating advanced data fetching...';

            try {
                // Multiple concurrent API calls
                const [usersResponse, postsResponse] = await Promise.all([
                    fetch('https://jsonplaceholder.typicode.com/users/1'),
                    fetch('https://jsonplaceholder.typicode.com/posts?userId=1&_limit=3')
                ]);

                const user = await usersResponse.json();
                const posts = await postsResponse.json();

                status.innerHTML = '<span class="status-indicator status-success"></span>Advanced data fetching complete!';

                response.innerHTML = `
                    <div class="data-item">
                        <h3>👤 User Profile</h3>
                        <p><strong>Name:</strong> ${user.name}</p>
                        <p><strong>Email:</strong> ${user.email}</p>
                        <p><strong>Company:</strong> ${user.company.name}</p>
                    </div>
                    <div class="data-item">
                        <h3>📝 Recent Posts (${posts.length})</h3>
                        ${posts.map(post => `
                            <div style="margin: 10px 0; padding: 10px; background: white; border-radius: 5px;">
                                <strong>${post.title}</strong>
                                <p style="margin-top: 5px; color: #666; font-size: 0.9em;">${post.body.substring(0, 100)}...</p>
                            </div>
                        `).join('')}
                    </div>
                    <div class="data-item">
                        <strong>🚀 Advanced Features Used:</strong>
                        <ul style="margin-top: 10px; padding-left: 20px;">
                            <li>Promise.all() for concurrent requests</li>
                            <li>Error handling with try/catch</li>
                            <li>Loading states and visual feedback</li>
                            <li>Dynamic HTML generation</li>
                            <li>Progressive content loading</li>
                        </ul>
                    </div>
                `;

            } catch (error) {
                status.innerHTML = '<span class="status-indicator status-error"></span>Data fetching failed!';
                response.innerHTML = `<div class="api-response">ERROR: ${error.message}</div>`;
            }
        }

        // Add some interactive elements that demonstrate dynamic content
        document.addEventListener('DOMContentLoaded', function() {
            // Add hover effects to concept cards
            const cards = document.querySelectorAll('.concept-card');
            cards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.background = 'linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05))';
                });
                card.addEventListener('mouseleave', function() {
                    this.style.background = 'white';
                });
            });

            // Dynamic time update
            setInterval(() => {
                const timeElements = document.querySelectorAll('.dynamic-time');
                timeElements.forEach(el => {
                    el.textContent = new Date().toLocaleTimeString();
                });
            }, 1000);
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html>